
#include<iostream>
#include<cstring>
using namespace std;

/*

//虚析构和纯虚析构

class Animal
{
public:
	Animal()
	{
		cout << "Animal构造函数调用" << endl;
	}
	//纯虚函数
	virtual void speak() = 0;

	////利用虚析构解决, 父类指针释放子类对象时不干净的问题
	//virtual ~Animal()
	//{
	//	cout << "Animal虚析构函数调用" << endl;
	//}

	//纯虚析构
	//对于纯虚析构而言, 既需要声明, 也需要函数实现
	//有了纯虚析构之后, 这个类也属于抽象类, 无法实例化对象
	virtual ~Animal() = 0;

};

Animal::~Animal()
{
	cout << "Animal纯虚析构函数调用" << endl;
}

class Cat : public Animal
{
public:
	Cat(string name)
	{
		cout << "Cat构造函数调用" << endl;
		//创建在堆区
		m_Name = new string(name);
	}
	virtual void speak()
	{
		cout << *m_Name <<"小猫在说话" << endl;
	}

	~Cat()
	{
		if (m_Name != NULL)
		{
			cout << "Cat析构函数调用" << endl;
			delete m_Name;
			m_Name = NULL;
		}
	}

	string* m_Name;
};

void test01()
{
	Animal* animal = new Cat("Tom");
	animal->speak();
	//父类指针在析构时候, 不会调用子类中析构函数, 导致子类如果有堆区属性, 就会造成内存泄漏
	delete animal;
}
int main()
{

	test01();
	//test02();

	system("pause");
	return 0;
}
*/